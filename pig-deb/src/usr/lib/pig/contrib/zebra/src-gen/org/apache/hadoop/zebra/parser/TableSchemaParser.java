/* Generated By:JavaCC: Do not edit this line. TableSchemaParser.java */
package org.apache.hadoop.zebra.parser;
import java.io.*;
import org.apache.hadoop.zebra.schema.Schema;
import org.apache.hadoop.zebra.schema.ColumnType;
import org.apache.hadoop.zebra.types.Projection;

public class TableSchemaParser implements TableSchemaParserConstants {
           public static void main( String[] args )
           throws ParseException, TokenMgrError , java.io.FileNotFoundException, java.io.IOException {
                TableSchemaParser parser = new TableSchemaParser( System.in ) ;
                                        Schema schema = parser.RecordSchema(null);
                                        System.out.println("OK");
                                        FileOutputStream output = new FileOutputStream("/tmp/schema");
                                        ObjectOutputStream objout = new ObjectOutputStream(output);
                                        objout.writeObject(schema);
                                        objout.close();
                                        System.out.println(schema.toString());
      }

  final public ColumnType Type() throws ParseException {
        ColumnType type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOL:
    case LONG:
    case FLOAT:
    case DOUBLE:
    case STRING:
    case BYTES:
      type = BasicType();
      break;
    case COLLECTION:
    case RECORD:
    case MAP:
      type = CompositeType();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnType CompositeType() throws ParseException {
        Token t = null;
        ColumnType type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
      t = jj_consume_token(MAP);
      break;
    case COLLECTION:
      t = jj_consume_token(COLLECTION);
      break;
    case RECORD:
      t = jj_consume_token(RECORD);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        type = ColumnType.getTypeByName(t.image);
        {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnType BasicType() throws ParseException {
        Token t = null;
        ColumnType type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
      break;
    case LONG:
      t = jj_consume_token(LONG);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    case BYTES:
      t = jj_consume_token(BYTES);
      break;
    case BOOL:
      t = jj_consume_token(BOOL);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   String typeName = t.image;
        type = ColumnType.getTypeByName(typeName);
        {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema ColumnSchema() throws ParseException, ParseException {
        Token t1;
        Schema item = null;
        Schema.ColumnSchema fs = null;
    if (jj_2_1(3)) {
      fs = SchemaRecord();
    } else if (jj_2_2(3)) {
      fs = SchemaCollection();
    } else if (jj_2_3(3)) {
      fs = SchemaMap();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        fs = AtomSchema();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema ProjectionColumnSchema() throws ParseException, ParseException {
        Token t1;
        Schema item = null;
        Schema.ColumnSchema fs = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      if (jj_2_4(3)) {
        fs = SchemaRecord();
      } else if (jj_2_5(3)) {
        fs = SchemaCollection();
      } else if (jj_2_6(3)) {
        fs = SchemaMap();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          fs = AtomSchema();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    {if (true) return fs;}
      break;
    default:
      jj_la1[5] = jj_gen;
    {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AtomSchema() throws ParseException, ParseException {
        Token t1 = null;
        ColumnType type = ColumnType.BYTES;
        Schema.ColumnSchema fs;
    t1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      jj_consume_token(23);
      type = BasicType();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                        fs = new Schema.ColumnSchema(t1.image, type);
                        {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema SchemaMap() throws ParseException, ParseException {
        Token t1 = null;
        Schema s;
        Schema.ColumnSchema fs;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(23);
    jj_consume_token(MAP);
    s = MapSchema();
                fs = new Schema.ColumnSchema(t1.image, s, ColumnType.MAP);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema SchemaRecord() throws ParseException, ParseException {
        Token t1 = null;
        Schema s;
        Schema.ColumnSchema fs;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(23);
    jj_consume_token(RECORD);
    jj_consume_token(24);
    s = RecordSchemaInternal();
    jj_consume_token(25);
                fs = new Schema.ColumnSchema(t1.image, s, ColumnType.RECORD);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema SchemaCollection() throws ParseException, ParseException {
        Token t1 = null;
        Schema.ColumnSchema fs = null;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(23);
    jj_consume_token(COLLECTION);
    jj_consume_token(24);
    fs = SchemaCollectionEntry(t1.image);
    jj_consume_token(25);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema SchemaCollectionEntry(String id) throws ParseException, ParseException {
        Schema.ColumnSchema fs = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RECORD:
      fs = AnonymousSchemaRecord();
      break;
    case IDENTIFIER:
      fs = SchemaRecord();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Schema.ColumnSchema(id, new Schema(fs), ColumnType.COLLECTION);}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousColumnSchema() throws ParseException, ParseException {
        Token t1;
        Schema item = null;
        Schema.ColumnSchema fs = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RECORD:
      fs = AnonymousSchemaRecord();
      break;
    case COLLECTION:
      fs = AnonymousSchemaCollection();
      break;
    case MAP:
      fs = AnonymousSchemaMap();
      break;
    default:
      jj_la1[8] = jj_gen;
      fs = AnonymousAtomSchema();
    }
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousAtomSchema() throws ParseException, ParseException {
        ColumnType type = ColumnType.BYTES;
        Schema.ColumnSchema fs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOL:
    case LONG:
    case FLOAT:
    case DOUBLE:
    case STRING:
    case BYTES:
      type = BasicType();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                        fs = new Schema.ColumnSchema(null, type);
                        {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousSchemaMap() throws ParseException, ParseException {
        Schema s;
        Schema.ColumnSchema fs;
    jj_consume_token(MAP);
    s = MapSchema();
                fs = new Schema.ColumnSchema(null, s, ColumnType.MAP);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousSchemaRecord() throws ParseException, ParseException {
        Token t1 = null;
        Schema s;
        Schema.ColumnSchema fs;
    jj_consume_token(RECORD);
    jj_consume_token(24);
    s = RecordSchemaInternal();
    jj_consume_token(25);
                fs = new Schema.ColumnSchema(null, s, ColumnType.RECORD);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema.ColumnSchema AnonymousSchemaCollection() throws ParseException, ParseException {
        Schema s;
        Schema.ColumnSchema fs;
    jj_consume_token(COLLECTION);
    jj_consume_token(24);
    fs = SchemaCollectionEntry(null);
    jj_consume_token(25);
    s = new Schema(fs);
                fs = new Schema.ColumnSchema(null, s, ColumnType.COLLECTION);
                {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Schema RecordSchemaInternal() throws ParseException, ParseException {
  Schema list = new Schema();
        Schema.ColumnSchema fs = null;
    fs = ColumnSchema();
                       list.add(fs);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_1;
      }
      jj_consume_token(26);
      fs = ColumnSchema();
                                                                 list.add(fs);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Schema RecordSchema(Schema list) throws ParseException, ParseException {
        if (list == null)
                list = new Schema();
        Schema.ColumnSchema fs = null;
    try {
      fs = ColumnSchema();
                              if (fs != null && Projection.isVirtualColumn(fs.getName())) {if (true) throw new ParseException("["+fs.getName()+"] is a reserved virtual column name");} list.add(fs);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        jj_consume_token(26);
        fs = ColumnSchema();
                                            if (fs != null && Projection.isVirtualColumn(fs.getName())) {if (true) throw new ParseException("["+fs.getName()+"] is a reserved virtual column name");} list.add(fs);
      }
      jj_consume_token(0);
    } catch (TokenMgrError e) {
                {if (true) throw new ParseException(e.getMessage());}
    }
          {if (true) return (list.getNumColumns() == 0 || (list.getNumColumns() == 1 && list.getColumn(0) == null) ? null : list);}
    throw new Error("Missing return statement in function");
  }

  final public Schema ProjectionSchema(Schema list) throws ParseException, ParseException {
        if (list == null)
                list = new Schema();
        Schema.ColumnSchema fs = null;
    try {
      fs = ProjectionColumnSchema();
                                                list.add(fs);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
        jj_consume_token(26);
        fs = ProjectionColumnSchema();
                                                      list.add(fs);
      }
      jj_consume_token(0);
    } catch (TokenMgrError e) {
                {if (true) throw new ParseException(e.getMessage());}
    }
          {if (true) return (list.getNumColumns() == 0 || (list.getNumColumns() == 1 && list.getColumn(0) == null) ? null : list);}
    throw new Error("Missing return statement in function");
  }

  final public Schema MapSchema() throws ParseException, ParseException {
        Schema list = new Schema();
        Schema.ColumnSchema fs = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      fs = AnonymousColumnSchema();
      jj_consume_token(25);
      break;
    default:
      jj_la1[13] = jj_gen;

    }
        if (fs == null)
        {
                list.add(new Schema.ColumnSchema("", ColumnType.BYTES));
        } else {
                list.add(fs);
        }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(MAP)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(RECORD)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(COLLECTION)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TableSchemaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ef80,0x38000,0x6f80,0x400000,0x400000,0x400000,0x800000,0x410000,0x38000,0x6f80,0x4000000,0x4000000,0x4000000,0x1000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TableSchemaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TableSchemaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TableSchemaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TableSchemaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TableSchemaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TableSchemaParser(TableSchemaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TableSchemaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
